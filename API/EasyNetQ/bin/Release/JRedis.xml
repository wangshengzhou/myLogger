<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JRedis</name>
    </assembly>
    <members>
        <!-- 对于成员“M:ServiceStack.AssertUtils.AreNotNull(System.Collections.Generic.IDictionary{System.String,System.Object})”忽略有格式错误的 XML 注释 -->
        <member name="M:ServiceStack.CommandsUtils.ExecuteAsyncCommandExec(System.Collections.Generic.IEnumerable{ServiceStack.Commands.ICommandExec})">
            <summary>
            Provide the an option for the callee to block until all commands are executed
            </summary>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.CryptUtils">
            <summary>
            Useful .NET Encryption Utils from:
            http://andrewlocatelliwoodcock.com/2011/08/01/implementing-rsa-asymmetric-public-private-key-encryption-in-c-encrypting-under-the-public-key/
            </summary>
        </member>
        <member name="M:ServiceStack.CryptUtils.Encrypt(System.String,System.String,ServiceStack.RsaKeyLengths)">
            <summary>
            Encrypt an arbitrary string of data under the supplied public key
            </summary>
            <param name="publicKey">The public key to encrypt under</param>
            <param name="data">The data to encrypt</param>
            <param name="length">The bit length or strength of the public key: 1024, 2048 or 4096 bits. This must match the 
            value actually used to create the publicKey</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.CryptUtils.CreatePublicAndPrivateKeyPair">
            <summary>
            Create Public and Private Key Pair based on settings already in static class.
            </summary>        
            <returns>RsaKeyPair</returns>
        </member>
        <member name="M:ServiceStack.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            Gets the textual description of the enum if it has one. e.g.
            
            <code>
            enum UserColors
            {
                [Description("Bright Red")]
                BrightRed
            }
            UserColors.BrightRed.ToDescription();
            </code>
            </summary>
            <param name="enum"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FuncUtils.TryExec(System.Action)">
            <summary>
            Invokes the action provided and returns true if no excpetion was thrown.
            Otherwise logs the exception and returns false if an exception was thrown.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.IPAddressExtensions">
            <summary>
            Useful IPAddressExtensions from: 
            http://blogs.msdn.com/knom/archive/2008/12/31/ip-address-calculations-with-c-subnetmasks-networks.aspx
            
            </summary>
        </member>
        <member name="M:ServiceStack.IPAddressExtensions.GetAllNetworkInterfaceIpv4Addresses">
            <summary>
            Gets the ipv4 addresses from all Network Interfaces that have Subnet masks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.IPAddressExtensions.GetAllNetworkInterfaceIpv6Addresses">
            <summary>
            Gets the ipv6 addresses from all Network Interfaces.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.UrnId">
            <summary>
            Creates a Unified Resource Name (URN) with the following formats:
            
            	- urn:{TypeName}:{IdFieldValue}						e.g. urn:UserSession:1
            	- urn:{TypeName}:{IdFieldName}:{IdFieldValue}		e.g. urn:UserSession:UserId:1			
            
            </summary>
        </member>
        <member name="M:ServiceStack.Reflection.PropertyAccessor`1.TypedGetPropertyFn``1">
            <summary>
            Func to get the Strongly-typed field
            </summary>
        </member>
        <member name="M:ServiceStack.Reflection.PropertyAccessor`1.ValueTypedGetPropertyFn``1">
            <summary>
            Required to cast the return ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Reflection.PropertyAccessor`1.TypedSetPropertyFn``1">
            <summary>
            Func to set the Strongly-typed field
            </summary>
        </member>
        <member name="M:ServiceStack.Reflection.PropertyAccessor`1.ValueTypesSetPropertyFn``1">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Reflection.PropertyAccessor`1.UnTypedSetPropertyFn``1">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Reflection.StaticAccessors`1.TypedGetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Func to get the Strongly-typed field
            </summary>
        </member>
        <member name="M:ServiceStack.Reflection.StaticAccessors`1.ValueUnTypedGetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Required to cast the return ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Reflection.StaticAccessors`1.TypedSetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Func to set the Strongly-typed field
            </summary>
        </member>
        <member name="M:ServiceStack.Reflection.StaticAccessors`1.ValueUnTypedSetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Reflection.StaticAccessors`1.UnTypedSetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="T:ServiceStack.Support.AdapterBase">
            <summary>
            Common functionality when creating adapters
            </summary>
        </member>
        <member name="M:ServiceStack.Support.AdapterBase.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified expression. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Support.AdapterBase.Execute(System.Action)">
            <summary>
            Executes the specified action (for void methods).
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:ServiceStack.Support.InMemoryLogFactory">
            <summary>
            Note: InMemoryLog keeps all logs in memory, so don't use it long running exceptions
            
            Returns a thread-safe InMemoryLog which you can use while *TESTING*
            to provide a detailed analysis of your logs.
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.ILogFactory">
            <summary>
            Factory to create ILog instances
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ILogFactory.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ILogFactory.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.ILog">
            <summary>
            Logs a message in a running application
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Debug(System.Object)">
            <summary>
            Logs a Debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Logs a Debug message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a Debug format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Error(System.Object)">
            <summary>
            Logs a Error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Logs a Error message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a Error format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Fatal(System.Object)">
            <summary>
            Logs a Fatal message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a Fatal message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a Error format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Info(System.Object)">
            <summary>
            Logs an Info message and exception.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Logs an Info message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs an Info format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Warn(System.Object)">
            <summary>
            Logs a Warning message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Logs a Warning message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a Warning format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="P:ServiceStack.Logging.ILog.IsDebugEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is debug enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ServiceStack.AttributeBase.TypeId">
            <summary>
            Required when using a TypeDescriptor to make it unique
            </summary>
        </member>
        <member name="P:ServiceStack.ApiAllowableValuesAttribute.Name">
            <summary>
            Gets or sets parameter name with which allowable values will be associated.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiAttribute.Description">
            <summary>
            The overall description of an API. Used by Swagger.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.Verb">
            <summary>
            Gets or sets verb to which applies attribute. By default applies to all verbs.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.ParameterType">
            <summary>
            Gets or sets parameter type: It can be only one of the following: path, query, body, or header.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.Name">
            <summary>
            Gets or sets unique name for the parameter. Each name must be unique, even if they are associated with different paramType values. 
            </summary>
            <remarks>
            <para>
            Other notes on the name field:
            If paramType is body, the name is used only for UI and codegeneration.
            If paramType is path, the name field must correspond to the associated path segment from the path field in the api object.
            If paramType is query, the name field corresponds to the query param name.
            </para>
            </remarks>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.Description">
            <summary>
            Gets or sets the human-readable description for the parameter.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.DataType">
            <summary>
            For path, query, and header paramTypes, this field must be a primitive. For body, this can be a complex or container datatype.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.IsRequired">
            <summary>
            For path, this is always true. Otherwise, this field tells the client whether or not the field must be supplied.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.AllowMultiple">
            <summary>
            For query params, this specifies that a comma-separated list of values can be passed to the API. For path and body types, this field cannot be true.
            </summary>
        </member>
        <member name="P:ServiceStack.IApiResponseDescription.StatusCode">
            <summary>
            The status code of a response
            </summary>
        </member>
        <member name="P:ServiceStack.IApiResponseDescription.Description">
            <summary>
            The description of a response status code
            </summary>
        </member>
        <member name="T:ServiceStack.ErrorResponse">
            <summary>
            Generic ResponseStatus for when Response Type can't be inferred.
            In schemaless formats like JSON, JSV it has the same shape as a typed Response DTO
            </summary>
        </member>
        <member name="T:ServiceStack.IHasResponseStatus">
            <summary>
            Contract indication that the Response DTO has a ResponseStatus
            </summary>
        </member>
        <member name="M:ServiceStack.IReplyClient.Send``1(System.Object)">
            <summary>
            Sends the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.IService">
            <summary>
            Marker interfaces
            </summary>
        </member>
        <member name="T:ServiceStack.RequestLogEntry">
            <summary>
            A log entry added by the IRequestLogger
            </summary>
        </member>
        <member name="T:ServiceStack.ResponseError">
            <summary>
            Error information pertaining to a particular named field.
            Used for returning multiple field validation errors.s
            </summary>
        </member>
        <member name="T:ServiceStack.ResponseStatus">
            <summary>
            Common ResponseStatus class that should be present on all response DTO's
            </summary>
        </member>
        <member name="M:ServiceStack.ResponseStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ResponseStatus"/> class.
            
            A response status without an errorcode == success
            </summary>
        </member>
        <member name="M:ServiceStack.ResponseStatus.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ResponseStatus"/> class.
            
            A response status with an errorcode == failure
            </summary>
        </member>
        <member name="M:ServiceStack.ResponseStatus.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ResponseStatus"/> class.
            
            A response status with an errorcode == failure
            </summary>
        </member>
        <member name="P:ServiceStack.ResponseStatus.ErrorCode">
            <summary>
            Holds the custom ErrorCode enum if provided in ValidationException
            otherwise will hold the name of the Exception type, e.g. typeof(Exception).Name
            
            A value of non-null means the service encountered an error while processing the request.
            </summary>
        </member>
        <member name="P:ServiceStack.ResponseStatus.Message">
            <summary>
            A human friendly error message
            </summary>
        </member>
        <member name="P:ServiceStack.ResponseStatus.StackTrace">
            <summary>
            
            </summary>
        </member>
        <member name="P:ServiceStack.ResponseStatus.Errors">
            <summary>
            For multiple detailed validation errors.
            Can hold a specific error message for each named field.
            </summary>
        </member>
        <member name="T:ServiceStack.RestrictAttribute">
            <summary>
            Decorate on Request DTO's to alter the accessibility of a service and its visibility on /metadata pages
            </summary>
        </member>
        <member name="M:ServiceStack.RestrictAttribute.#ctor(ServiceStack.RequestAttributes[])">
            <summary>
            Restrict access and metadata visibility to any of the specified access scenarios
            </summary>
            <value>The restrict access to scenarios.</value>
        </member>
        <member name="M:ServiceStack.RestrictAttribute.#ctor(ServiceStack.RequestAttributes[],ServiceStack.RequestAttributes[])">
            <summary>
            Restrict access and metadata visibility to any of the specified access scenarios
            </summary>
            <value>The restrict access to scenarios.</value>
        </member>
        <member name="M:ServiceStack.RestrictAttribute.ToAllowedFlagsSet(ServiceStack.RequestAttributes[])">
            <summary>
            Returns the allowed set of scenarios based on the user-specified restrictions
            </summary>
            <param name="restrictToAny"></param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.VisibleInternalOnly">
            <summary>
            Allow access but hide from metadata to requests from Localhost only
            </summary>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.VisibleLocalhostOnly">
            <summary>
            Allow access but hide from metadata to requests from Localhost and Local Intranet only
            </summary>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.InternalOnly">
            <summary>
            Restrict access and hide from metadata to requests from Localhost and Local Intranet only
            </summary>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.LocalhostOnly">
            <summary>
            Restrict access and hide from metadata to requests from Localhost only
            </summary>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.AccessTo">
            <summary>
            Sets a single access restriction
            </summary>
            <value>Restrict Access to.</value>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.AccessibleToAny">
            <summary>
            Restrict access to any of the specified access scenarios
            </summary>
            <value>Access restrictions</value>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.VisibilityTo">
            <summary>
            Sets a single metadata Visibility restriction
            </summary>
            <value>Restrict metadata Visibility to.</value>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.VisibleToAny">
            <summary>
            Restrict metadata visibility to any of the specified access scenarios
            </summary>
            <value>Visibility restrictions</value>
        </member>
        <member name="M:ServiceStack.RestrictExtensions.ToAllowedFlagsSet(ServiceStack.RequestAttributes)">
            <summary>
            Converts from a User intended restriction to a flag with all the allowed attribute flags set, e.g:
            
            If No Network restrictions were specified all Network access types are allowed, e.g:
                restrict EndpointAttributes.None => ... 111
            
            If a Network restriction was specified, only it will be allowed, e.g:
                restrict EndpointAttributes.LocalSubnet => ... 010
            
            The returned Enum will have a flag with all the allowed attributes set
            </summary>
            <param name="restrictTo"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.RouteAttribute">
            <summary>
            	Used to decorate Request DTO's to associate a RESTful request 
            	path mapping with a service.  Multiple attributes can be applied to 
            	each request DTO, to map multiple paths to the service.
            </summary>
        </member>
        <member name="M:ServiceStack.RouteAttribute.#ctor(System.String)">
            <summary>
            	<para>Initializes an instance of the <see cref="T:ServiceStack.RouteAttribute"/> class.</para>
            </summary>
            <param name="path">
            	<para>The path template to map to the request.  See 
            	<see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</para>
            </param>
        </member>
        <member name="M:ServiceStack.RouteAttribute.#ctor(System.String,System.String)">
            <summary>
            	<para>Initializes an instance of the <see cref="T:ServiceStack.RouteAttribute"/> class.</para>
            </summary>
            <param name="path">
            	<para>The path template to map to the request.  See 
            	<see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</para>
            </param>
            <param name="verbs">A comma-delimited list of HTTP verbs supported by the 
            	service.  If unspecified, all verbs are assumed to be supported.</param>
        </member>
        <member name="P:ServiceStack.RouteAttribute.Path">
            <summary>
            	Gets or sets the path template to be mapped to the request.
            </summary>
            <value>
            	A <see cref="T:System.String"/> value providing the path mapped to
            	the request.  Never <see langword="null"/>.
            </value>
            <remarks>
            	<para>Some examples of valid paths are:</para>
            
            	<list>
            		<item>"/Inventory"</item>
            		<item>"/Inventory/{Category}/{ItemId}"</item>
            		<item>"/Inventory/{ItemPath*}"</item>
            	</list>
            
            	<para>Variables are specified within "{}"
            	brackets.  Each variable in the path is mapped to the same-named property 
            	on the request DTO.  At runtime, ServiceStack will parse the 
            	request URL, extract the variable values, instantiate the request DTO,
            	and assign the variable values into the corresponding request properties,
            	prior to passing the request DTO to the service object for processing.</para>
            
            	<para>It is not necessary to specify all request properties as
            	variables in the path.  For unspecified properties, callers may provide 
            	values in the query string.  For example: the URL 
            	"http://services/Inventory?Category=Books&amp;ItemId=12345" causes the same 
            	request DTO to be processed as "http://services/Inventory/Books/12345", 
            	provided that the paths "/Inventory" (which supports the first URL) and 
            	"/Inventory/{Category}/{ItemId}" (which supports the second URL)
            	are both mapped to the request DTO.</para>
            
            	<para>Please note that while it is possible to specify property values
            	in the query string, it is generally considered to be less RESTful and
            	less desirable than to specify them as variables in the path.  Using the 
            	query string to specify property values may also interfere with HTTP
            	caching.</para>
            
            	<para>The final variable in the path may contain a "*" suffix
            	to grab all remaining segments in the path portion of the request URL and assign
            	them to a single property on the request DTO.
            	For example, if the path "/Inventory/{ItemPath*}" is mapped to the request DTO,
            	then the request URL "http://services/Inventory/Books/12345" will result
            	in a request DTO whose ItemPath property contains "Books/12345".
            	You may only specify one such variable in the path, and it must be positioned at
            	the end of the path.</para>
            </remarks>
        </member>
        <member name="P:ServiceStack.RouteAttribute.Summary">
            <summary>
               Gets or sets short summary of what the route does.
            </summary>
        </member>
        <member name="P:ServiceStack.RouteAttribute.Notes">
            <summary>
               Gets or sets longer text to explain the behaviour of the route. 
            </summary>
        </member>
        <member name="P:ServiceStack.RouteAttribute.Verbs">
            <summary>
            	Gets or sets a comma-delimited list of HTTP verbs supported by the service, such as
            	"GET,PUT,POST,DELETE".
            </summary>
            <value>
            	A <see cref="T:System.String"/> providing a comma-delimited list of HTTP verbs supported
            	by the service, <see langword="null"/> or empty if all verbs are supported.
            </value>
        </member>
        <member name="P:ServiceStack.RouteAttribute.Priority">
            <summary>
            Used to rank the precedences of route definitions in reverse routing. 
            i.e. Priorities below 0 are auto-generated have less precedence.
            </summary>
        </member>
        <member name="T:ServiceStack.FallbackRouteAttribute">
            <summary>
            Fallback routes have the lowest precedence, i.e. after normal Routes, static files or any matching Catch All Handlers.
            </summary>
        </member>
        <member name="T:ServiceStack.Caching.ICacheClient">
            <summary>
            A common interface implementation that is implemented by most cache providers
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Remove(System.String)">
            <summary>
            Removes the specified item from the cache.
            </summary>
            <param name="key">The identifier for the item to delete.</param>
            <returns>
            true if the item was successfully removed from the cache; false otherwise.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the cache for all the keys provided.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Get``1(System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The identifier for the item to retrieve.</param>
            <returns>
            The retrieved item, or <value>null</value> if the key was not found.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Increment(System.String,System.UInt32)">
            <summary>
            Increments the value of the specified key by the given amount. 
            The operation is atomic and happens on the server.
            A non existent value at key starts at 0
            </summary>
            <param name="key">The identifier for the item to increment.</param>
            <param name="amount">The amount by which the client wants to increase the item.</param>
            <returns>
            The new value of the item or -1 if not found.
            </returns>
            <remarks>The item must be inserted into the cache before it can be changed. The item must be inserted as a <see cref="T:System.String"/>. The operation only works with <see cref="T:System.UInt32"/> values, so -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Decrement(System.String,System.UInt32)">
            <summary>
            Increments the value of the specified key by the given amount. 
            The operation is atomic and happens on the server.
            A non existent value at key starts at 0
            </summary>
            <param name="key">The identifier for the item to increment.</param>
            <param name="amount">The amount by which the client wants to decrease the item.</param>
            <returns>
            The new value of the item or -1 if not found.
            </returns>
            <remarks>The item must be inserted into the cache before it can be changed. The item must be inserted as a <see cref="T:System.String"/>. The operation only works with <see cref="T:System.UInt32"/> values, so -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Add``1(System.String,``0)">
            <summary>
            Adds a new item into the cache at the specified cache key only if the cache is empty.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <returns>
            true if the item was successfully stored in the cache; false otherwise.
            </returns>
            <remarks>The item does not expire unless it is removed due memory pressure.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Set``1(System.String,``0)">
            <summary>
            Sets an item into the cache at the cache key specified regardless if it already exists or not.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Replace``1(System.String,``0)">
            <summary>
            Replaces the item at the cachekey specified only if an items exists at the location already. 
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.FlushAll">
            <summary>
            Invalidates all data on the cache.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.GetAll``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves multiple items from the cache. 
            The default value of T is set for all keys that do not exist.
            </summary>
            <param name="keys">The list of identifiers for the items to retrieve.</param>
            <returns>
            a Dictionary holding all items indexed by their key.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.SetAll``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Sets multiple items to the cache. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
        </member>
        <member name="T:ServiceStack.Caching.IMemcachedClient">
            <summary>
            A light interface over a cache client.
            This interface was inspired by Enyim.Caching.MemcachedClient
            
            Only the methods that are intended to be used are required, if you require
            extra functionality you can uncomment the unused methods below as they have been
            implemented in DdnMemcachedClient
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.Remove(System.String)">
            <summary>
            Removes the specified item from the cache.
            </summary>
            <param name="key">The identifier for the item to delete.</param>
            <returns>
            true if the item was successfully removed from the cache; false otherwise.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the cache for all the keys provided.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.Get(System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <param ICTname="key">The identifier for the item to retrieve.</param>
            <returns>
            The retrieved item, or <value>null</value> if the key was not found.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.Increment(System.String,System.UInt32)">
            <summary>
            Increments the value of the specified key by the given amount. The operation is atomic and happens on the server.
            </summary>
            <param name="key">The identifier for the item to increment.</param>
            <param name="amount">The amount by which the client wants to increase the item.</param>
            <returns>
            The new value of the item or -1 if not found.
            </returns>
            <remarks>The item must be inserted into the cache before it can be changed. The item must be inserted as a <see cref="T:System.String"/>. The operation only works with <see cref="T:System.UInt32"/> values, so -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.Decrement(System.String,System.UInt32)">
            <summary>
            Increments the value of the specified key by the given amount. The operation is atomic and happens on the server.
            </summary>
            <param name="key">The identifier for the item to increment.</param>
            <param name="amount">The amount by which the client wants to decrease the item.</param>
            <returns>
            The new value of the item or -1 if not found.
            </returns>
            <remarks>The item must be inserted into the cache before it can be changed. The item must be inserted as a <see cref="T:System.String"/>. The operation only works with <see cref="T:System.UInt32"/> values, so -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.Add(System.String,System.Object)">
            <summary>
            Inserts an item into the cache with a cache key to reference its location.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <returns>
            true if the item was successfully stored in the cache; false otherwise.
            </returns>
            <remarks>The item does not expire unless it is removed due memory pressure.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.Add(System.String,System.Object,System.DateTime)">
            <summary>
            Inserts an item into the cache with a cache key to reference its location.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="expiresAt">The time when the item is invalidated in the cache.</param>
            <returns>true if the item was successfully stored in the cache; false otherwise.</returns>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.FlushAll">
            <summary>
            Removes all data from the cache.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.GetAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves multiple items from the cache.
            </summary>
            <param name="keys">The list of identifiers for the items to retrieve.</param>
            <returns>
            a Dictionary holding all items indexed by their key.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.IRemoveByPattern.RemoveByPattern(System.String)">
            <summary>
            Removes items from cache that have keys matching the specified wildcard pattern
            </summary>
            <param name="pattern">The wildcard, where "*" means any sequence of characters and "?" means any single character.</param>
        </member>
        <member name="M:ServiceStack.Caching.IRemoveByPattern.RemoveByRegex(System.String)">
            <summary>
            Removes items from the cache based on the specified regular expression pattern
            </summary>
            <param name="regex">Regular expression pattern to search cache keys</param>
        </member>
        <member name="T:ServiceStack.Caching.ISession">
            <summary>
            A Users Session
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ISession.Set``1(System.String,``0)">
            <summary>
            Set a typed value at key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServiceStack.Caching.ISession.Get``1(System.String)">
            <summary>
            Get a typed value at key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Caching.ISession.Item(System.String)">
            <summary>
            Store any object at key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Caching.ISessionFactory">
            <summary>
            Retrieves a User Session
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ISessionFactory.GetOrCreateSession(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Gets the session for this request, creates one if it doesn't exist.
            </summary>
            <param name="httpReq"></param>
            <param name="httpRes"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Caching.ISessionFactory.GetOrCreateSession">
            <summary>
            Gets the session for this request, creates one if it doesn't exist.
            Only for ASP.NET apps. Uses the HttpContext.Current singleton.
            </summary>
        </member>
        <member name="T:ServiceStack.Configuration.IContainerAdapter">
            <summary>
            Allow delegation of dependencies to other IOC's
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.IContainerAdapter.TryResolve``1">
            <summary>
            Resolve Property Dependency
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.IContainerAdapter.Resolve``1">
            <summary>
            Resolve Constructor Dependency
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.IResolver.TryResolve``1">
            <summary>
            Resolve a dependency from the AppHost's IOC
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Data.IEntityStore`1">
            <summary>
            For providers that want a cleaner API with a little more perf
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.DataAnnotations.BelongToAttribute">
            <summary>
            BelongToAttribute
            Use to indicate that a join column belongs to another table.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ComputeAttribute">
            <summary>
            Compute attribute.
            Use to indicate that a property is a Calculated Field 
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.DecimalLengthAttribute">
            <summary>
            Decimal length attribute.
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ForeignKeyAttribute.ForeignKeyName">
            <summary>
            Explicit foreign key name. If it's null, or empty, the FK name will be autogenerated as before.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IgnoreAttribute">
            <summary>
            IgnoreAttribute
            Use to indicate that a property is not a field  in the table
            properties with this attribute are ignored when building sql sentences
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.MetaAttribute">
            <summary>
            Decorate any type or property with adhoc info
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PrimaryKeyAttribute">
            <summary>
            Primary key attribute.
            use to indicate that property is part of the pk
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.SchemaAttribute">
            <summary>
            Used to annotate an Entity with its DB schema
            </summary>
        </member>
        <!-- 对于成员“T:ServiceStack.DataAnnotations.SequenceAttribute”忽略有格式错误的 XML 注释 -->
        <member name="T:ServiceStack.Logging.ConsoleLogFactory">
            <summary>
            Creates a Console Logger, that logs all messages to: System.Console
            
            Made public so its testable
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.ConsoleLogger">
            <summary>
            Default logger is to Console.WriteLine
            
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.DebugLogFactory">
            <summary>
            Creates a Debug Logger, that logs all messages to: System.Diagnostics.Debug
            
            Made public so its testable
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.DebugLogger">
            <summary>
            Default logger is to System.Diagnostics.Debug.WriteLine
            
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.LogManager">
            <summary>
            Logging API for this library. You can inject your own implementation otherwise
            will use the DebugLogFactory to write to System.Diagnostics.Debug
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:ServiceStack.Logging.LogManager.LogFactory">
            <summary>
            Gets or sets the log factory.
            Use this to override the factory that is used to create loggers
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.NullDebugLogger">
            <summary>
            Default logger is to System.Diagnostics.Debug.Print
            
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.NullLogFactory">
            <summary>
            Creates a Debug Logger, that logs all messages to: System.Diagnostics.Debug
            
            Made public so its testable
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.StringBuilderLogFactory">
            <summary>
            StringBuilderLog writes to shared StringBuffer.
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.StringBuilderLog.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.StringBuilderLog.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.StringBuilderLog.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:ServiceStack.Logging.TestLogFactory">
            <summary>
            Creates a test Logger, that stores all log messages in a member list
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.TestLogger">
            <summary>
            Tests logger which  stores all log messages in a member list which can be examined later
            
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.TestLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.TestLogger"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.Logging.TestLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.TestLogger"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.Logging.TestLogger.Log(ServiceStack.Logging.TestLogger.Levels,System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.TestLogger.LogFormat(ServiceStack.Logging.TestLogger.Levels,System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.TestLogger.Log(ServiceStack.Logging.TestLogger.Levels,System.Object)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.Publish(System.String,System.Byte[])">
            <summary>
            Publish the specified message into the durable queue @queueName
            </summary>
            <param name="queueName"></param>
            <param name="messageBytes"></param>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.YLT(System.String,System.Byte[])">
            <summary>
            Publish the specified message into the transient queue @queueName
            </summary>
            <param name="queueName"></param>
            <param name="messageBytes"></param>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.Get(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Synchronous blocking get.
            </summary>
            <param name="queueName"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.GetAsync(System.String)">
            <summary>
            Non blocking get message
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.WaitForYLTOnAny(System.String[])">
            <summary>
            Blocking wait for notifications on any of the supplied channels
            </summary>
            <param name="channelNames"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Messaging.IMessageService">
            <summary>
            Simple definition of an MQ Host
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.RegisterHandler``1(System.Func{ServiceStack.Messaging.IMessage{``0},System.Object})">
            <summary>
            Register DTOs and hanlders the MQ Host will process
            </summary>
            <typeparam name="T"></typeparam>
            <param name="processMessageFn"></param>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.RegisterHandler``1(System.Func{ServiceStack.Messaging.IMessage{``0},System.Object},System.Action{ServiceStack.Messaging.IMessage{``0},System.Exception})">
            <summary>
            Register DTOs and hanlders the MQ Host will process
            </summary>
            <typeparam name="T"></typeparam>
            <param name="processMessageFn"></param>
            <param name="processExceptionEx"></param>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.GetStats">
            <summary>
            Get Total Current Stats for all Message Handlers
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.GetStatus">
            <summary>
            Get the status of the service. Potential Statuses: Disposed, Stopped, Stopping, Starting, Started
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.GetStatsDescription">
            <summary>
            Get a Stats dump
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.Start">
            <summary>
            Start the MQ Host if not already started.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.Stop">
            <summary>
            Stop the MQ Host if not already stopped. 
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.IMessageService.MessageFactory">
            <summary>
            Factory to create consumers and producers that work with this service
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.IMessageService.RegisteredTypes">
            <summary>
            Get a list of all message types registered on this MQ Host
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.MessageError">
            <summary>
            An Error Message Type that can be easily serialized
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Message`1">
            <summary>
            Basic implementation of IMessage[T]
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Messaging.MessagingException">
            <summary>
            Base Exception for all ServiceStack.Messaging exceptions
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.QueueNames`1">
            <summary>
            Util static generic class to create unique queue names for types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Messaging.QueueNames">
            <summary>
            Util class to create unique queue names for runtime types
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.UnRetryableMessagingException">
            <summary>
            For messaging exceptions that should by-pass the messaging service's configured
            retry attempts and store the message straight into the DLQ
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClient.As``1">
            <summary>
            Returns a high-level typed client API
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientCacheManager.GetClient">
            <summary>
            Returns a Read/Write client (The default) using the hosts defined in ReadWriteHosts
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientCacheManager.GetReadOnlyClient">
            <summary>
            Returns a ReadOnly client using the hosts defined in ReadOnlyHosts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientCacheManager.GetCacheClient">
            <summary>
            Returns a Read/Write ICacheClient (The default) using the hosts defined in ReadWriteHosts
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientCacheManager.GetReadOnlyCacheClient">
            <summary>
            Returns a ReadOnly ICacheClient using the hosts defined in ReadOnlyHosts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientsManager.GetClient">
            <summary>
            Returns a Read/Write client (The default) using the hosts defined in ReadWriteHosts
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientsManager.GetReadOnlyClient">
            <summary>
            Returns a ReadOnly client using the hosts defined in ReadOnlyHosts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientsManager.GetCacheClient">
            <summary>
            Returns a Read/Write ICacheClient (The default) using the hosts defined in ReadWriteHosts
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientsManager.GetReadOnlyCacheClient">
            <summary>
            Returns a ReadOnly ICacheClient using the hosts defined in ReadOnlyHosts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisSubscription.SubscribeToChannels(System.String[])">
            <summary>
            Subscribe to channels by name
            </summary>
            <param name="channels"></param>
        </member>
        <member name="M:ServiceStack.Redis.IRedisSubscription.SubscribeToChannelsMatching(System.String[])">
            <summary>
            Subscribe to channels matching the supplied patterns
            </summary>
            <param name="patterns"></param>
        </member>
        <member name="P:ServiceStack.Redis.IRedisSubscription.SubscriptionCount">
            <summary>
            The number of active subscriptions this client has
            </summary>
        </member>
        <member name="P:ServiceStack.Redis.IRedisSubscription.OnSubscribe">
            <summary>
            Registered handler called after client *Subscribes* to each new channel
            </summary>
        </member>
        <member name="P:ServiceStack.Redis.IRedisSubscription.OnMessage">
            <summary>
            Registered handler called when each message is received
            </summary>
        </member>
        <member name="P:ServiceStack.Redis.IRedisSubscription.OnUnSubscribe">
            <summary>
            Registered handler called when each channel is unsubscribed
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.IRedisTransaction">
            <summary>
            Interface to redis transaction
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.IRedisTransactionBase">
            <summary>
            Base transaction interface, shared by typed and non-typed transactions
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.IRedisPipelineShared">
            <summary>
            Pipeline interface shared by typed and non-typed pipelines
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperation">
            <summary>
            Interface to operations that allow queued commands to be completed
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.IRedisQueueableOperation">
            <summary>
            interface to operation that can queue commands
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Generic.IRedisList`1">
            <summary>
            Wrap the common redis list operations under a IList[string] interface.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Generic.IRedisTypedTransaction`1">
            <summary>
            Redis transaction for typed client
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Redis.Generic.IRedisTypedQueueableOperation`1">
            <summary>
            interface to queueable operation using typed redis client
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Redis.Generic.IRedisTypedPipeline`1">
            <summary>
            Interface to redis typed pipeline
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.IRedisPipeline">
            <summary>
            Interface to redis pipeline
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IHasRequestFilter">
            <summary>
            This interface can be implemented by an attribute
            which adds an request filter for the specific request DTO the attribute marked.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IHasRequestFilter.RequestFilter(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            The request filter is executed before the service.
            </summary>
            <param name="req">The http request wrapper</param>
            <param name="res">The http response wrapper</param>
            <param name="requestDto">The request DTO</param>
        </member>
        <member name="M:ServiceStack.Web.IHasRequestFilter.Copy">
            <summary>
            A new shallow copy of this filter is used on every request.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Web.IHasRequestFilter.Priority">
            <summary>
            Order in which Request Filters are executed. 
            &lt;0 Executed before global request filters
            &gt;0 Executed after global request filters
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IHasResponseFilter">
            <summary>
            This interface can be implemented by an attribute
            which adds an response filter for the specific response DTO the attribute marked.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IHasResponseFilter.ResponseFilter(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            The response filter is executed after the service
            </summary>
            <param name="req">The http request wrapper</param>
            <param name="res">The http response wrapper</param>
        </member>
        <member name="M:ServiceStack.Web.IHasResponseFilter.Copy">
            <summary>
            A new shallow copy of this filter is used on every request.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Web.IHasResponseFilter.Priority">
            <summary>
            Order in which Response Filters are executed. 
            &lt;0 Executed before global response filters
            &gt;0 Executed after global response filters
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.Status">
            <summary>
            The HTTP Response Status
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.StatusCode">
            <summary>
            The HTTP Response Status Code
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.StatusDescription">
            <summary>
            The HTTP Status Description
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.ContentType">
            <summary>
            The HTTP Response ContentType
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.Headers">
            <summary>
            Additional HTTP Headers
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.Response">
            <summary>
            Response DTO
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.ResponseFilter">
            <summary>
            if not provided, get's injected by ServiceStack
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.RequestContext">
            <summary>
            Holds the request call context
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IHttpRequest">
            <summary>
            A thin wrapper around ASP.NET or HttpListener's HttpRequest
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IRequest">
            <summary>
            A thin wrapper around each host's Request e.g: ASP.NET, HttpListener, MQ, etc
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IRequest.GetRawBody">
            <summary>
            The entire string contents of Request.InputStream
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Web.IRequest.OriginalRequest">
            <summary>
            The underlying ASP.NET or HttpListener HttpRequest
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.OperationName">
            <summary>
            The name of the service being called (e.g. Request DTO Name)
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.Verb">
            <summary>
            The Verb / HttpMethod or Action for this request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.RequestPreferences">
            <summary>
            Optional preferences for the processing of this Request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.Dto">
            <summary>
            The Request DTO, after it has been deserialized.
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.ContentType">
            <summary>
            The request ContentType
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.ResponseContentType">
            <summary>
            The expected Response ContentType for this request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.HasExplicitResponseContentType">
            <summary>
            Whether the ResponseContentType has been explicitly overrided or whether it was just the default
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.Items">
            <summary>
            Attach any data to this request that all filters and services can access.
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.UseBufferedStream">
            <summary>
            Buffer the Request InputStream so it can be re-read
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.UserHostAddress">
            <summary>
            The Remote Ip as reported by Request.UserHostAddress
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.RemoteIp">
            <summary>
            The Remote Ip as reported by X-Forwarded-For, X-Real-IP or Request.UserHostAddress
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.IsSecureConnection">
            <summary>
            e.g. is https or not
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.Files">
            <summary>
            Access to the multi-part/formdata files posted on this request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.UrlReferrer">
            <summary>
            The value of the Referrer, null if not available
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.HttpResponse">
            <summary>
            The HttpResponse
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.HttpMethod">
            <summary>
            The HTTP Verb
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.XForwardedFor">
            <summary>
            The IP Address of the X-Forwarded-For header, null if null or empty
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.XForwardedPort">
            <summary>
            The Port number of the X-Forwarded-Port header, null if null or empty
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.XForwardedProtocol">
            <summary>
            The http or https scheme of the X-Forwarded-Proto header, null if null or empty
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.XRealIp">
            <summary>
            The value of the X-Real-IP header, null if null or empty
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IHttpResponse">
            <summary>
            A thin wrapper around ASP.NET or HttpListener's HttpResponse
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IResponse">
            <summary>
            A thin wrapper around each host's Response e.g: ASP.NET, HttpListener, MQ, etc
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IResponse.Close">
            <summary>
            Signal that this response has been handled and no more processing should be done.
            When used in a request or response filter, no more filters or processing is done on this request.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IResponse.End">
            <summary>
            Calls Response.End() on ASP.NET HttpResponse otherwise is an alias for Close().
            Useful when you want to prevent ASP.NET to provide it's own custom error page.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IResponse.Flush">
            <summary>
            Response.Flush() and OutputStream.Flush() seem to have different behaviour in ASP.NET
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IResponse.OriginalResponse">
            <summary>
            The underlying ASP.NET or HttpListener HttpResponse
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IResponse.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IPartialWriter.WritePartialTo(ServiceStack.Web.IResponse)">
            <summary>
            Write a partial content result
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IPartialWriter.IsPartialRequest">
            <summary>
            Whether this HttpResult allows Partial Response
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IRequestLogger">
            <summary>
            Log every service request
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IRequestLogger.Log(ServiceStack.Web.IRequest,System.Object,System.Object,System.TimeSpan)">
            <summary>
            Log a request
            </summary>
            <param name="request">The RequestContext</param>
            <param name="requestDto">Request DTO</param>
            <param name="response">Response DTO or Exception</param>
            <param name="elapsed">How long did the Request take</param>
        </member>
        <member name="M:ServiceStack.Web.IRequestLogger.GetLatestLogs(System.Nullable{System.Int32})">
            <summary>
            View the most recent logs
            </summary>
            <param name="take"></param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.EnableSessionTracking">
            <summary>
            Turn On/Off Session Tracking
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.EnableRequestBodyTracking">
            <summary>
            Turn On/Off Raw Request Body Tracking
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.EnableResponseTracking">
            <summary>
            Turn On/Off Tracking of Responses
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.EnableErrorTracking">
            <summary>
            Turn On/Off Tracking of Exceptions
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.RequiredRoles">
            <summary>
            Limit access to /requestlogs service to role
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.ExcludeRequestDtoTypes">
            <summary>
            Don't log requests of these types.
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.HideRequestBodyForRequestDtoTypes">
            <summary>
            Don't log request bodys for services with sensitive information.
            By default Auth and Registration requests are hidden.
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IRequiresRequest">
            <summary>
            Implement on services that need access to the RequestContext
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IRequiresRequestStream">
            <summary>
            Implement on Request DTOs that need access to the raw Request Stream
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequiresRequestStream.RequestStream">
            <summary>
            The raw Http Request Input Stream
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IServiceController">
            <summary>
            Responsible for executing the operation within the specified context.
            </summary>
            <value>The operation types.</value>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.GetRestPathForRequest(System.String,System.String)">
            <summary>
            Returns the first matching RestPath
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.ExecuteMessage``1(ServiceStack.Messaging.IMessage{``0})">
            <summary>
            Executes the MQ DTO request.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.ExecuteMessage``1(ServiceStack.Messaging.IMessage{``0},ServiceStack.Web.IRequest)">
            <summary>
            Executes the MQ DTO request with the supplied requestContext
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.Execute(System.Object,ServiceStack.Web.IRequest)">
            <summary>
            Executes the DTO request under the supplied requestContext.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.Execute(System.Object)">
            <summary>
            Executes the DTO request with an empty RequestContext.
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IServiceRoutes">
            <summary>
            Allow the registration of user-defined routes for services
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceRoutes.Add``1(System.String)">
            <summary>
            	Maps the specified REST path to the specified request DTO.
            </summary>
            <typeparam name="TRequest">The type of request DTO to map 
            	the path to.</typeparam>
            <param name="restPath">The path to map the request DTO to.
            	See <see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</param>
            <returns>The same <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance;
            	never <see langword="null"/>.</returns>
        </member>
        <member name="M:ServiceStack.Web.IServiceRoutes.Add``1(System.String,System.String)">
            <summary>
            	Maps the specified REST path to the specified request DTO, and
            	specifies the HTTP verbs supported by the path.
            </summary>
            <typeparam name="TRequest">The type of request DTO to map 
            	the path to.</typeparam>
            <param name="restPath">The path to map the request DTO to.
            	See <see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</param>
            <param name="verbs">
            	The comma-delimited list of HTTP verbs supported by the path, 
            	such as "GET,PUT,DELETE".  Specify empty or <see langword="null"/>
            	to indicate that all verbs are supported.
            </param>
            <returns>The same <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance;
            	never <see langword="null"/>.</returns>
        </member>
        <member name="M:ServiceStack.Web.IServiceRoutes.Add(System.Type,System.String,System.String)">
            <summary>
            	Maps the specified REST path to the specified request DTO, 
            	specifies the HTTP verbs supported by the path, and indicates
            	the default MIME type of the returned response.
            </summary>
            <param name="requestType">
            	The type of request DTO to map the path to.
            </param>
            <param name="restPath">The path to map the request DTO to.
            	See <see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</param>
            <param name="verbs">
            	The comma-delimited list of HTTP verbs supported by the path, 
            	such as "GET,PUT,DELETE".
            </param>
            <returns>The same <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance;
            	never <see langword="null"/>.</returns>
        </member>
        <member name="M:ServiceStack.Web.IServiceRoutes.Add(System.Type,System.String,System.String,System.Int32)">
            <summary>
            	Maps the specified REST path to the specified request DTO, 
            	specifies the HTTP verbs supported by the path, and indicates
            	the default MIME type of the returned response.
            </summary>
            <param name="priority">
                Used to rank the precedences of route definitions in reverse routing. 
                i.e. Priorities below 0 are auto-generated have less precedence.
            </param>
        </member>
        <member name="M:ServiceStack.Web.IServiceRoutes.Add(System.Type,System.String,System.String,System.String,System.String)">
            <summary>
            	Maps the specified REST path to the specified request DTO, 
            	specifies the HTTP verbs supported by the path, and indicates
            	the default MIME type of the returned response.
            </summary>
            <param name="requestType">
            	The type of request DTO to map the path to.
            </param>
            <param name="restPath">The path to map the request DTO to.
            	See <see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</param>
            <param name="verbs">
            	The comma-delimited list of HTTP verbs supported by the path, 
            	such as "GET,PUT,DELETE".
            </param>
            <param name="summary">
                The short summary of what the REST does. 
            </param>
            <param name="notes">
                The longer text to explain the behaviour of the REST. 
            </param>
            <returns>The same <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance;
            	never <see langword="null"/>.</returns>
        </member>
        <member name="T:ServiceStack.Redis.BasicRedisClientManager">
            <summary>
            Provides thread-safe retrievel of redis clients since each client is a new one.
            Allows the configuration of different ReadWrite and ReadOnly hosts
            </summary>
            <summary>
            BasicRedisClientManager for ICacheClient
            
            For more interoperabilty I'm also implementing the ICacheClient on
            this cache client manager which has the affect of calling 
            GetCacheClient() for all write operations and GetReadOnlyCacheClient() 
            for the read ones.
            
            This works well for master-slave replication scenarios where you have 
            1 master that replicates to multiple read slaves.
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.BasicRedisClientManager.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Hosts can be an IP Address or Hostname in the format: host[:port]
            e.g. 127.0.0.1:6379
            default is: localhost:6379
            </summary>
            <param name="readWriteHosts">The write hosts.</param>
            <param name="readOnlyHosts">The read hosts.</param>
        </member>
        <member name="M:ServiceStack.Redis.BasicRedisClientManager.GetClient">
            <summary>
            Returns a Read/Write client (The default) using the hosts defined in ReadWriteHosts
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.BasicRedisClientManager.GetReadOnlyClient">
            <summary>
            Returns a ReadOnly client using the hosts defined in ReadOnlyHosts.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Redis.BasicRedisClientManager.NamespacePrefix">
            <summary>
            Gets or sets object key prefix.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.BufferPool">
            <summary>
            Courtesy of @marcgravell
            http://code.google.com/p/protobuf-net/source/browse/trunk/protobuf-net/BufferPool.cs
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.PooledRedisClientManager">
            <summary>
            Provides thread-safe pooling of redis client connections.
            Allows load-balancing of master-write and read-slave hosts, ideal for
            1 master and multiple replicated read slaves.
            </summary>
            <summary>
            For interoperabilty GetCacheClient() and GetReadOnlyCacheClient()
            return an ICacheClient wrapper around the redis manager which has the affect of calling 
            GetClient() for all write operations and GetReadOnlyClient() for the read ones.
            
            This works well for master-slave replication scenarios where you have 
            1 master that replicates to multiple read slaves.
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.PooledRedisClientManager.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},ServiceStack.Redis.RedisClientManagerConfig)">
            <summary>
            Hosts can be an IP Address or Hostname in the format: host[:port]
            e.g. 127.0.0.1:6379
            default is: localhost:6379
            </summary>
            <param name="readWriteHosts">The write hosts.</param>
            <param name="readOnlyHosts">The read hosts.</param>
            <param name="config">The config.</param>
        </member>
        <member name="M:ServiceStack.Redis.PooledRedisClientManager.GetClient">
            <summary>
            Returns a Read/Write client (The default) using the hosts defined in ReadWriteHosts
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.PooledRedisClientManager.GetInActiveWriteClient">
            <summary>
            Called within a lock
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.PooledRedisClientManager.GetReadOnlyClient">
            <summary>
            Returns a ReadOnly client using the hosts defined in ReadOnlyHosts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.PooledRedisClientManager.GetInActiveReadClient">
            <summary>
            Called within a lock
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.PooledRedisClientManager.DisposeReadOnlyClient(ServiceStack.Redis.RedisNativeClient)">
            <summary>
            Disposes the read only client.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:ServiceStack.Redis.PooledRedisClientManager.DisposeWriteClient(ServiceStack.Redis.RedisNativeClient)">
            <summary>
            Disposes the write client.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="P:ServiceStack.Redis.PooledRedisClientManager.NamespacePrefix">
            <summary>
            Gets or sets object key prefix.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.PooledRedisClientManager.DisposablePooledClient`1">
            <summary>
            Manage a client acquired from the PooledRedisClientManager
            Dispose method will release the client back to the pool.
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.PooledRedisClientManager.DisposablePooledClient`1.#ctor(ServiceStack.Redis.PooledRedisClientManager)">
            <summary>
            wrap the acquired client
            </summary>
            <param name="clientManager"></param>
        </member>
        <member name="M:ServiceStack.Redis.PooledRedisClientManager.DisposablePooledClient`1.Dispose">
            <summary>
            release the wrapped client back to the pool
            </summary>
        </member>
        <member name="P:ServiceStack.Redis.PooledRedisClientManager.DisposablePooledClient`1.Client">
            <summary>
            access the wrapped client
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisCacheClientFactory">
            <summary>
            Provide the factory implementation for creating a RedisCacheClient that 
            can be mocked and used by different 'Redis Client Managers' 
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisClient">
            <summary>
            The client wraps the native redis operations into a more readable c# API.
            
            Where possible these operations are also exposed in common c# interfaces, 
            e.g. RedisClient.Lists => IList[string]
            	 RedisClient.Sets => ICollection[string]
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisNativeClient">
            <summary>
            This class contains all the common operations for the RedisClient.
            The client contains a 1:1 mapping of c# methods to redis operations of the same name.
            
            Not threadsafe use a pooled manager
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.RedisNativeClient.Exec">
            <summary>
            Requires custom result parsing
            </summary>
            <returns>Number of results</returns>
        </member>
        <member name="M:ServiceStack.Redis.RedisNativeClient.SendCommand(System.Byte[][])">
            <summary>
            Command to set multuple binary safe arguments
            </summary>
            <param name="cmdWithBinaryArgs"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.RedisNativeClient.ResetSendBuffer">
            <summary>
            reset buffer index in send buffer
            </summary>
        </member>
        <member name="P:ServiceStack.Redis.RedisNativeClient.Active">
            <summary>
            Used to manage connection pooling
            </summary>
        </member>
        <member name="P:ServiceStack.Redis.RedisNativeClient.NamespacePrefix">
            <summary>
            Gets or sets object key prefix.
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.RedisClient.New">
            <summary>
            Creates a new instance of the Redis Client from NewFactoryFn. 
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.RedisClient.UrnKey``1(``0)">
            <summary>
            Returns key with automatic object id detection in provided value with <typeparam name="T">generic type</typeparam>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.RedisClient.UrnKey``1(System.Object)">
            <summary>
            Returns key with explicit object id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.RedisClient.UrnKey(System.Type,System.Object)">
            <summary>
            Returns key with explicit object type and id.
            </summary>
            <param name="type"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Redis.RedisClientFactory">
            <summary>
            Provide the default factory implementation for creating a RedisClient that 
            can be mocked and used by different 'Redis Client Managers' 
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisClientHash">
            <summary>
            Wrap the common redis set operations under a ICollection[string] interface.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisClientList">
            <summary>
            Wrap the common redis list operations under a IList[string] interface.
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.RedisClientManagerCacheClient.Dispose">
            <summary>
            Ignore dispose on RedisClientsManager, which should be registered as a singleton
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisClientSet">
            <summary>
            Wrap the common redis set operations under a ICollection[string] interface.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisClientsManagerExtensions">
            <summary>
            Useful wrapper IRedisClientsManager to cut down the boiler plat of most IRedisClient access
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisClientSortedSet">
            <summary>
            Wrap the common redis set operations under a ICollection[string] interface.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisException">
            <summary>
            Redis-specific exception. Thrown if unable to connect to Redis server due to socket exception, for example.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.ShardedConnectionPool">
            <summary>
            Provides a redis connection pool that can be sharded
            </summary>
        </member>
        <member name="F:ServiceStack.Redis.ShardedConnectionPool.name">
            <summary>
            logical name
            </summary>
        </member>
        <member name="F:ServiceStack.Redis.ShardedConnectionPool.weight">
            <summary>
            An arbitrary weight relative to other nodes
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.ShardedConnectionPool.#ctor(System.String,System.Int32,System.String[])">
            <param name="name">logical name</param>
            <param name="weight">An arbitrary weight relative to other nodes</param>
            <param name="readWriteHosts">redis nodes</param>
        </member>
        <member name="T:ServiceStack.Redis.ShardedRedisClientManager">
            <summary>
            Provides sharding of redis client connections.
            uses consistent hashing to distribute keys across connection pools
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.ShardedRedisClientManager.GetConnectionPool(System.String)">
            <summary>
            maps a key to a redis connection pool
            </summary>
            <param name="key">key to map</param>
            <returns>a redis connection pool</returns>
        </member>
        <member name="T:ServiceStack.Redis.Generic.QueuedRedisTypedCommand`1">
            <summary>
            A complete redis command, with method to send command, receive response, and run callback on success or failure
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Generic.RedisClientHash`2">
            <summary>
            Wrap the common redis set operations under a ICollection[string] interface.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Generic.RedisClientSet`1">
            <summary>
            Wrap the common redis set operations under a ICollection[string] interface.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Generic.RedisClientSortedSet`1">
            <summary>
            Wrap the common redis set operations under a ICollection[string] interface.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Generic.RedisTypedClient`1">
            <summary>
            Allows you to get Redis value operations to operate against POCO types.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.Redis.Generic.RedisTypedClient`1.#ctor(ServiceStack.Redis.RedisClient)">
            <summary>
            Use this to share the same redis connection with another
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="T:ServiceStack.Redis.Generic.RedisTypedCommandQueue`1">
            <summary>
            Queue of commands for redis typed client
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Redis.RedisQueueCompletableOperation">
            <summary>
            Redis operation (transaction/pipeline) that allows queued commands to be completed
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisTypedPipeline`1">
            <summary>
            Pipeline for redis typed client
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Redis.Generic.RedisTypedTransaction`1">
            <summary>
            Adds support for Redis Transactions (i.e. MULTI/EXEC/DISCARD operations).
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Generic.RedisTypedTransaction`1.QueueExpectQueued">
            <summary>
            Put "QUEUED" messages at back of queue
            </summary>
            <param name="queued"></param>
        </member>
        <member name="M:ServiceStack.Redis.Generic.RedisTypedTransaction`1.Exec">
            <summary>
            Issue exec command (not queued)
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Generic.RedisTypedTransaction`1.handleMultiDataResultCount(System.Int32)">
            <summary>
            callback for after result count is read in
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.QueuedRedisCommand">
            <summary>
            A complete redis command, with method to send command, receive response, and run callback on success or failure
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisCommand">
            <summary>
            Redis command that does not get queued
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisCommandQueue">
            <summary>
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.RedisAllPurposePipeline.#ctor(ServiceStack.Redis.RedisClient)">
            <summary>
            General purpose pipeline
            </summary>
            <param name="redisClient"></param>
        </member>
        <member name="M:ServiceStack.Redis.RedisAllPurposePipeline.Flush">
            <summary>
            Flush send buffer, and read responses
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.ConsistentHash`1.AddTarget(`0,System.Int32)">
            <summary>
             Adds a node and maps points across the circle
            </summary>
            <param name="node"> node to add </param>
            <param name="weight"> An arbitrary number, specifies how often it occurs relative to other targets. </param>
        </member>
        <member name="M:ServiceStack.Redis.Support.ConsistentHash`1.ModifiedBinarySearch(System.UInt64[],System.UInt64)">
            <summary>
              A variation of Binary Search algorithm. Given a number, matches the next highest number from the sorted array. 
              If a higher number does not exist, then the first number in the array is returned.
            </summary>
            <param name="sortedArray"> a sorted array to perform the search </param>
            <param name="val"> number to find the next highest number against </param>
            <returns> next highest number </returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.ConsistentHash`1.Md5Hash(System.String)">
            <summary>
              Given a key, generates an unsigned 64 bit hash code using MD5
            </summary>
            <param name="key"> </param>
            <returns> </returns>
        </member>
        <member name="T:ServiceStack.Redis.Support.IOrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are ordered independently of the key and value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary</typeparam>
        </member>
        <member name="M:ServiceStack.Redis.Support.IOrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:ServiceStack.Redis.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add.</param>
            <returns>The index of the newly added entry</returns>
            <remarks>
            <para>You can also use the <see cref="P:System.Collections.Generic.IDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:ServiceStack.Redis.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:ServiceStack.Redis.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Add"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ServiceStack.Redis.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see></exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:ServiceStack.Redis.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> is read-only.<br/>
            -or-<br/>
            The <see cref="T:ServiceStack.Redis.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> has a fized size.</exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.IOrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a new entry into the <see cref="T:ServiceStack.Redis.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ICollection.Count"/>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ServiceStack.Redis.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:ServiceStack.Redis.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> is read-only.<br/>
            -or-<br/>
            The <see cref="T:ServiceStack.Redis.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> has a fized size.</exception>
        </member>
        <member name="P:ServiceStack.Redis.Support.IOrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ICollection.Count"/>.</exception>
        </member>
        <member name="T:ServiceStack.Redis.Support.ObjectSerializer">
            <summary>
            serialize/deserialize arbitrary objects
            (objects must be serializable)
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.ObjectSerializer.Serialize(System.Object)">
            <summary>
             Serialize object to buffer
            </summary>
            <param name="value">serializable object</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.ObjectSerializer.Deserialize(System.Byte[])">
            <summary>
                Deserialize buffer to object
            </summary>
            <param name="someBytes">byte array to deserialize</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Redis.Support.OptimizedObjectSerializer">
            <summary>
            Optimized  <see cref="T:ServiceStack.Redis.Support.ISerializer"/> implementation. Primitive types are manually serialized, the rest are serialized using binary serializer /&gt;.
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.OptimizedObjectSerializer.Serialize(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.OptimizedObjectSerializer.Deserialize(System.Byte[])">
            <summary>
            
            </summary>
            <param name="someBytes"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.OptimizedObjectSerializer.SerializeToWrapper(System.Object)">
            <summary>
            serialize value and wrap with <see cref="T:ServiceStack.Redis.Support.SerializedObjectWrapper"/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.OptimizedObjectSerializer.Unwrap(ServiceStack.Redis.Support.SerializedObjectWrapper)">
            <summary>
            Unwrap object wrapped in <see cref="T:ServiceStack.Redis.Support.SerializedObjectWrapper"/>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Redis.Support.OrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are ordered independently of the key and value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary</typeparam>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified initial capacity.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0</exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">IEqualityComparer&lt;TKey&gt;</see> to use when comparing keys, or <null/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1">EqualityComparer&lt;TKey&gt;</see> for the type of the key.</param>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified initial capacity and comparer.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">IEqualityComparer&lt;TKey&gt;</see> to use when comparing keys, or <null/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1">EqualityComparer&lt;TKey&gt;</see> for the type of the key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0</exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.ConvertToKeyType(System.Object)">
            <summary>
            Converts the object passed as a key to the key type of the dictionary
            </summary>
            <param name="keyObject">The key object to check</param>
            <returns>The key object, cast as the key type of the dictionary</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyObject"/> is <null/>.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="keyObject"/>.</exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.ConvertToValueType(System.Object)">
            <summary>
            Converts the object passed as a value to the value type of the dictionary
            </summary>
            <param name="value">The object to convert to the value type of the dictionary</param>
            <returns>The value object, converted to the value type of the dictionary</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueObject"/> is <null/>, and the value type of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The value type of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="valueObject"/>.</exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a new entry into the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:ServiceStack.Redis.Support.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#Specialized#IOrderedDictionary#Insert(System.Int32,System.Object,System.Object)">
            <summary>
            Inserts a new entry into the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:ServiceStack.Redis.Support.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.<br/>
            -or-<br/>
            <paramref name="value"/> is <null/>, and the value type of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.<br/>
            -or-<br/>
            The value type of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.<br/>
            -or-<br/>
            An element with the same key already exists in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the entry at the specified index from the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="index">The zero-based index of the entry to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:ServiceStack.Redis.Support.OrderedDictionary`2.Count"/>.</exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <remarks>A key cannot be <null/>, but a value can be.
            <para>You can also use the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Add"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <returns>The index of the newly added entry</returns>
            <remarks>A key cannot be <null/>, but a value can be.
            <para>You can also use the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Add"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.<br/>
            -or-<br/>
            <paramref name="value"/> is <null/>, and the value type of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.<br/>
            -or-<br/>
            The value type of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <remarks>The capacity is not changed as a result of calling this method.</remarks>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</param>
            <returns><see langword="true"/> if the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</param>
            <returns><see langword="true"/> if the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.</exception>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.IndexOfKey(`0)">
            <summary>
            Returns the zero-based index of the specified key in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>
            </summary>
            <param name="key">The key to locate in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></param>
            <returns>The zero-based index of <paramref name="key"/>, if <paramref name="ley"/> is found in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>; otherwise, -1</returns>
            <remarks>This method performs a linear search; therefore it has a cost of O(n) at worst.</remarks>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the entry with the specified key from the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="key">The key of the entry to remove</param>
            <returns><see langword="true"/> if the key was found and the corresponding element was removed; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the entry with the specified key from the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="key">The key of the entry to remove</param>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> elements to a one-dimensional Array object at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> object that is the destination of the <see cref="T:KeyValuePair`2&gt;"/> objects copied from the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <remarks>The <see cref="M:CopyTo"/> method preserves the order of the elements in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></remarks>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of <paramref name="value"/>. This parameter can be passed uninitialized.</param>
            <returns><see langword="true"/> if the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified value to the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> with the specified key.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure representing the key and value to add to the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> contains a specific key and value.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure to locate in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
            <returns><see langword="true"/> if <paramref name="keyValuePair"/> is found in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> to an array of type <see cref="T:KeyValuePair`2&gt;"/>, starting at the specified index.
            </summary>
            <param name="array">The one-dimensional array of type <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> that is the destination of the <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> elements copied from the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a key and value from the dictionary.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure representing the key and value to remove from the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
            <returns><see langword="true"/> if the key and value represented by <paramref name="keyValuePair"/> is successfully found and removed; otherwise, <see langword="false"/>. This method returns <see langword="false"/> if <paramref name="keyValuePair"/> is not found in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</returns>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.Dictionary">
            <summary>
            Gets the dictionary object that stores the keys and values
            </summary>
            <value>The dictionary object that stores the keys and values for the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></value>
            <remarks>Accessing this property will create the dictionary object if necessary</remarks>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.List">
            <summary>
            Gets the list object that stores the key/value pairs.
            </summary>
            <value>The list object that stores the key/value pairs for the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></value>
            <remarks>Accessing this property will create the list object if necessary.</remarks>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:ServiceStack.Redis.Support.OrderedDictionary`2.Count"/>.</exception>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#Specialized#IOrderedDictionary#Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:ServiceStack.Redis.Support.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueObject"/> is a null reference, and the value type of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The value type of the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="valueObject"/>.</exception>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> has a fixed size.
            </summary>
            <value><see langword="true"/> if the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> has a fixed size; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection is read-only.
            </summary>
            <value><see langword="true"/> if the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is read-only; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
            <remarks>
            A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modification of the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
            </remarks>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> object containing the keys in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:System.Collections.ICollection"/> object is not a static copy; instead, the collection refers back to the keys in the original <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the key collection.</remarks>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</value>
            <remarks>The returned <see cref="T:System.Collections.ICollection"/> object is not a static copy; instead, the <see cref="T:System.Collections.ICollection"/> refers back to the values in the original <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection. Therefore, changes to the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the <see cref="T:System.Collections.ICollection"/>.</remarks>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, attempting to get it returns <null/>, and attempting to set it creates a new element using the specified key.</value>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, attempting to get it returns <null/>, and attempting to set it creates a new element using the specified key.</value>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.Count">
            <summary>
            Gets the number of key/values pairs contained in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <value>The number of key/value pairs contained in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</value>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object is synchronized (thread-safe).
            </summary>
            <value>This method always returns false.</value>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object.</value>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object containing the keys in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object containing the keys in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object is not a static copy; instead, the collection refers back to the keys in the original <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the key collection.</remarks>
        </member>
        <member name="P:ServiceStack.Redis.Support.OrderedDictionary`2.Values">
            <summary>
            Gets an <see cref="T:ICollection{TValue}">ICollection&lt;TValue&gt;</see> object containing the values in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:ICollection{TValue}">ICollection&lt;TValue&gt;</see> object containing the values in the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:ICollection{TValue}">ICollection&lt;TKey&gt;</see> object is not a static copy; instead, the collection refers back to the values in the original <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:ServiceStack.Redis.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the value collection.</remarks>
        </member>
        <member name="T:ServiceStack.Redis.Support.RedisNamespace">
            <summary>
            manages a "region" in the redis key space
            namespace can be cleared by incrementing the generation
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.RedisNamespace.GetGeneration">
            <summary>
            get current generation
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.RedisNamespace.SetGeneration(System.Int64)">
            <summary>
            set new generation
            </summary>
            <param name="generation"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.RedisNamespace.GetGenerationKey">
            <summary>
            redis key for generation
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.RedisNamespace.GetGlobalKeysKey">
            <summary>
            get redis key that holds all namespace keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.RedisNamespace.GlobalCacheKey(System.Object)">
            <summary>
            get global cache key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.RedisNamespace.GlobalKey(System.Object,System.Int32)">
            <summary>
            get global key inside of this namespace
            </summary>
            <param name="key"></param>
            <param name="numUniquePrefixes">prefixes can be added for name deconfliction</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.RedisNamespace.Sanitize(System.String)">
            <summary>
            replace UniqueCharacter with its double, to avoid name clash
            </summary>
            <param name="dirtyString"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.RedisNamespace.Sanitize(System.Object)">
            <summary>
            
            </summary>
            <param name="dirtyString"></param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Redis.Support.RedisNamespace.LockingStrategy">
            <summary>
            get locking strategy
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Support.SerializedObjectWrapper">
            <summary>
            wraps a serialized representation of an object
            </summary>
            
        </member>
        <member name="M:ServiceStack.Redis.Support.SerializedObjectWrapper.#ctor(System.UInt16,System.ArraySegment{System.Byte})">
            <summary>
            Initializes a new instance of <see cref="T:ServiceStack.Redis.Support.SerializedObjectWrapper"/>.
            </summary>
            <param name="flags">Custom item data.</param>
            <param name="data">The serialized item.</param>
        </member>
        <member name="P:ServiceStack.Redis.Support.SerializedObjectWrapper.Data">
            <summary>
            The data representing the item being stored/retireved.
            </summary>
        </member>
        <member name="P:ServiceStack.Redis.Support.SerializedObjectWrapper.Flags">
            <summary>
            Flags set for this instance.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Support.Locking.DisposableDistributedLock">
            <summary>
            distributed lock class that follows the Resource Allocation Is Initialization pattern
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Locking.DisposableDistributedLock.#ctor(ServiceStack.Redis.IRedisClient,System.String,System.Int32,System.Int32)">
            <summary>
            Lock
            </summary>
            <param name="client"></param>
            <param name="globalLockKey"></param>
            <param name="acquisitionTimeout">in seconds</param>
            <param name="lockTimeout">in seconds</param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Locking.DisposableDistributedLock.Dispose">
            <summary>
            unlock
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Support.Locking.IDistributedLock">
            <summary>
            Distributed lock interface
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Locking.DistributedLock.Lock(System.String,System.Int32,System.Int32,System.Int64@,ServiceStack.Redis.IRedisClient)">
            <summary>
            acquire distributed, non-reentrant lock on key
            </summary>
            <param name="key">global key for this lock</param>
            <param name="acquisitionTimeout">timeout for acquiring lock</param>
            <param name="lockTimeout">timeout for lock, in seconds (stored as value against lock key) </param>
            <param name="client"></param>
            <param name="lockExpire"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Locking.DistributedLock.Unlock(System.String,System.Int64,ServiceStack.Redis.IRedisClient)">
            <summary>
            unlock key
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Locking.DistributedLock.CalculateLockExpire(System.TimeSpan,System.Int32)">
            <summary>
            
            </summary>
            <param name="ts"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Redis.Support.Locking.ILockingStrategy">
            <summary>
            Locking strategy interface
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Support.Locking.ReadLock">
            <summary>
            This class manages a read lock for a local readers/writer lock, 
            using the Resource Acquisition Is Initialization pattern
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Locking.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            RAII initialization 
            </summary>
            <param name="lockObject"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Locking.ReadLock.Dispose">
            <summary>
            RAII disposal
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Locking.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            This class manages a write lock for a local readers/writer lock, 
            using the Resource Acquisition Is Initialization pattern
            </summary>
            <param name="lockObject"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Locking.WriteLock.Dispose">
            <summary>
            RAII disposal
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.ISequentialData`1.PopAndUnlock">
            <summary>
            pop numProcessed items from queue and unlock queue for work item id that dequeued
            items are associated with
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.ISequentialData`1.DoneProcessedWorkItem">
            <summary>
            A dequeued work item has been processed. When all of the dequeued items have been processed,
            all items will be popped from the queue,and the queue unlocked for the work item id that
            the dequeued items are associated with
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.ISequentialData`1.UpdateNextUnprocessed(`0)">
            <summary>
            Update first unprocessed item with new work item.
            </summary>
            <param name="newWorkItem"></param>
        </member>
        <member name="P:ServiceStack.Redis.Support.Queue.ISequentialData`1.DequeueItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.ISequentialWorkQueue`1.Enqueue(System.String,`0)">
            <summary>
            Enqueue item in priority queue corresponding to workItemId identifier
            </summary>
            <param name="workItemId"></param>
            <param name="workItem"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.ISequentialWorkQueue`1.PrepareNextWorkItem">
            <summary>
            Preprare next work item id for dequeueing
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.ISequentialWorkQueue`1.Dequeue(System.Int32)">
            <summary>
            Dequeue up to maxBatchSize items from queue corresponding to workItemId identifier.
            Once this method is called, <see cref="M:ServiceStack.Redis.Support.Queue.ISequentialWorkQueue`1.Dequeue(System.Int32)"/> or <see cref="!:Peek"/> will not
            return any items for workItemId until the dequeue lock returned is unlocked.
            </summary>
            <param name="maxBatchSize"></param>
            <param name="defer"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.ISequentialWorkQueue`1.Update(System.String,System.Int32,`0)">
            <summary>
            Replace existing work item in workItemId queue
            </summary>
            <param name="workItemId"></param>
            <param name="index"></param>
            <param name="newWorkItem"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.ISimpleWorkQueue`1.Enqueue(`0)">
            <summary>
            Enqueue item
            </summary>
            <param name="workItem"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.ISimpleWorkQueue`1.Dequeue(System.Int32)">
            <summary>
            Dequeue up to maxBatchSize items from queue
            </summary>
            <param name="maxBatchSize"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Redis.Support.Queue.Implementation.RedisChronologicalWorkQueue`1">
            <summary>
            distributed work item queue. Messages are processed in chronological order
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Support.Queue.Implementation.RedisWorkQueue`1">
            <summary>
            distributed work item queue
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisChronologicalWorkQueue`1.Enqueue(System.String,`0,System.Double)">
            <summary>
            Enqueue incoming messages
            </summary>
            <param name="workItem"></param>
            <param name="workItemId"></param>
            <param name="time"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisChronologicalWorkQueue`1.Dequeue(System.Double,System.Double,System.Int32)">
            <summary>
            Dequeue next batch of work items
            </summary>
            <param name="minTime"></param>
            <param name="maxTime"></param>
            <param name="maxBatchSize"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Redis.Support.Queue.Implementation.RedisSequentialWorkQueue`1">
            <summary>
            distributed work item queue. Each message must have an associated
            work item  id. For a given id, all work items are guaranteed to be processed
            in the order in which they are received.
            
            
            </summary>
            <summary>
            distributed work item queue. Each message must have an associated
            work item  id. For a given id, all work items are guaranteed to be processed
            in the order in which they are received.
            
            
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisSequentialWorkQueue`1.Enqueue(System.String,`0)">
            <summary>
            Queue incoming messages
            </summary>
            <param name="workItem"></param>
            <param name="workItemId"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisSequentialWorkQueue`1.PrepareNextWorkItem">
            <summary>
            Must call this periodically to move work items from priority queue to pending queue
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisSequentialWorkQueue`1.Update(System.String,System.Int32,`0)">
            <summary>
            Replace existing work item in workItemId queue
            </summary>
            <param name="workItemId"></param>
            <param name="index"></param>
            <param name="newWorkItem"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisSequentialWorkQueue`1.Pop(System.String,System.Int32)">
            <summary>
            Pop items from list
            </summary>
            <param name="workItemId"></param>
            <param name="itemCount"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisSequentialWorkQueue`1.HarvestZombies">
            <summary>
            Force release of locks held by crashed servers
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisSequentialWorkQueue`1.TryForceReleaseLock(ServiceStack.Redis.Support.Queue.Implementation.SerializingRedisClient,System.String)">
            <summary>
            release lock held by crashed server
            </summary>
            <param name="client"></param>
            <param name="workItemId"></param>
            <returns>true if lock is released, either by this method or by another client; false otherwise</returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisSequentialWorkQueue`1.Unlock(System.String)">
            <summary>
            Unlock work item id, so other servers can process items for this id
            </summary>
            <param name="workItemId"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisSequentialWorkQueue`1.DequeueManager.UpdateNextUnprocessed(`0)">
            <summary>
            
            </summary>
            <param name="newWorkItem"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisSequentialWorkQueue`1.DequeueManager.PopAndUnlock(System.Int32,ServiceStack.Redis.IRedisClient)">
            <summary>
            
            </summary>
            <param name="numProcessed"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisSequentialWorkQueue`1.DequeueManager.PopAndUnlock(System.Int32)">
            <summary>
            
            </summary>
            <param name="numProcessed"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Redis.Support.Queue.Implementation.RedisSimpleWorkQueue`1">
            <summary>
            simple distributed work item queue 
            
            
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisSimpleWorkQueue`1.Enqueue(`0)">
            <summary>
            Queue incoming messages
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.RedisSimpleWorkQueue`1.Dequeue(System.Int32)">
            <summary>
            Dequeue next batch of work items for processing. After this method is called,
            no other work items with same id will be available for
            dequeuing until PostDequeue is called
            </summary>
            <returns>KeyValuePair: key is work item id, and value is list of dequeued items.
            </returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.SequentialData`1.PopAndUnlock">
            <summary>
            pop remaining items that were returned by dequeue, and unlock queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.SequentialData`1.DoneProcessedWorkItem">
            <summary>
            indicate that an item has been processed by the caller
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.SequentialData`1.UpdateNextUnprocessed(`0)">
            <summary>
            Update first unprocessed work item
            </summary>
            <param name="newWorkItem"></param>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.SerializingRedisClient.Serialize(System.Object)">
            <summary>
             Serialize object to buffer
            </summary>
            <param name="value">serializable object</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.SerializingRedisClient.Serialize(System.Object[])">
            <summary>
            
            </summary>
            <param name="values">array of serializable objects</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.Support.Queue.Implementation.SerializingRedisClient.Deserialize(System.Byte[])">
            <summary>
             Deserialize buffer to object
            </summary>
            <param name="someBytes">byte array to deserialize</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:ServiceStack.Redis.Support.Queue.Implementation.SerializingRedisClient.Deserialize(System.Byte[][])”忽略有格式错误的 XML 注释 -->
        <member name="P:ServiceStack.Redis.Support.Queue.Implementation.SerializingRedisClient.Serializer">
            <summary>
            customize the client serializer
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Support.Queue.Implementation.SerializingRedisClientFactory">
            <summary>
            Factory to create SerializingRedisClient objects
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.RedisTransaction">
            <summary>
            Adds support for Redis Transactions (i.e. MULTI/EXEC/DISCARD operations).
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.RedisTransaction.QueueExpectQueued">
            <summary>
            Put "QUEUED" messages at back of queue
            </summary>
            <param name="queued"></param>
        </member>
        <member name="M:ServiceStack.Redis.RedisTransaction.Exec">
            <summary>
            Issue exec command (not queued)
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.RedisTransaction.handleMultiDataResultCount(System.Int32)">
            <summary>
            callback for after result count is read in
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:ServiceStack.Text.AssemblyUtils">
            <summary>
            Utils to load types
            </summary>
        </member>
        <member name="M:ServiceStack.Text.AssemblyUtils.FindType(System.String)">
            <summary>
            Find the type from the name supplied
            </summary>
            <param name="typeName">[typeName] or [typeName, assemblyName]</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.AssemblyUtils.MainInterface``1">
            <summary>
            The top-most interface of the given type, if any.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.AssemblyUtils.FindType(System.String,System.String)">
            <summary>
            Find type if it exists
            </summary>
            <param name="typeName"></param>
            <param name="assemblyName"></param>
            <returns>The type if it exists</returns>
        </member>
        <member name="M:ServiceStack.AutoMappingUtils.PopulateWith(System.Object)">
            <summary>
            Populate an object with Example data.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.AutoMappingUtils.PopulateObjectInternal(System.Object,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Populates the object with example data.
            </summary>
            <param name="obj"></param>
            <param name="recursionInfo">Tracks how deeply nested we are</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Text.DateTimeExtensions">
            <summary>
            A fast, standards-based, serialization-issue free DateTime serailizer.
            </summary>
        </member>
        <member name="T:ServiceStack.Text.WP.HashSet`1">
            <summary>
             A hashset implementation that uses an IDictionary
            </summary>
        </member>
        <member name="M:ServiceStack.Text.ITypeSerializer`1.CanCreateFromString(System.Type)">
            <summary>
            Determines whether this serializer can create the specified type from a string.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if this instance [can create from string] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ServiceStack.Text.ITypeSerializer`1.DeserializeFromString(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.ITypeSerializer`1.DeserializeFromReader(System.IO.TextReader)">
            <summary>
            Deserializes from reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.ITypeSerializer`1.SerializeToString(`0)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.ITypeSerializer`1.SerializeToWriter(`0,System.IO.TextWriter)">
            <summary>
            Serializes to writer.
            </summary>
            <param name="value">The value.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sTimeSpanHandler">
            <summary>
            Sets which format to use when serializing TimeSpans
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sEmitCamelCaseNames">
            <summary>
            <see langword="true"/> if the <see cref="T:ServiceStack.Text.Common.ITypeSerializer"/> is configured
            to take advantage of <see cref="T:System.CLSCompliantAttribute"/> specification,
            to support user-friendly serialized formats, ie emitting camelCasing for JSON
            and parsing member names and enum values in a case-insensitive manner.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sEmitLowercaseUnderscoreNames">
            <summary>
            <see langword="true"/> if the <see cref="T:ServiceStack.Text.Common.ITypeSerializer"/> is configured
            to support web-friendly serialized formats, ie emitting lowercase_underscore_casing for JSON
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sPropertyConvention">
            <summary>
            Define how property names are mapped during deserialization
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sThrowOnDeserializationError">
            <summary>
            Gets or sets a value indicating if the framework should throw serialization exceptions
            or continue regardless of deserialization errors. If <see langword="true"/>  the framework
            will throw; otherwise, it will parse as many fields as possible. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sAlwaysUseUtc">
            <summary>
            Gets or sets a value indicating if the framework should always convert <see cref="T:System.DateTime"/> to UTC format instead of local time. 
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sAssumeUtc">
            <summary>
            Gets or sets a value indicating if the framework should always assume <see cref="T:System.DateTime"/> is in UTC format if Kind is Unspecified. 
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sAppendUtcOffset">
            <summary>
            Gets or sets whether we should append the Utc offset when we serialize Utc dates. Defaults to no.
            Only supported for when the JsConfig.DateHandler == JsonDateHandler.TimestampOffset
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sEscapeUnicode">
            <summary>
            Gets or sets a value indicating if unicode symbols should be serialized as "\uXXXX".
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sIncludePublicFields">
            <summary>
            If set to true, Interface types will be prefered over concrete types when serializing.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sMaxDepth">
            <summary>
            Sets the maximum depth to avoid circular dependencies
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig.sModelFactory">
            <summary>
            Set this to enable your own type construction provider.
            This is helpful for integration with IoC containers where you need to call the container constructor.
            Return null if you don't know how to construct the type and the parameterless constructor will be used.
            </summary>
        </member>
        <member name="P:ServiceStack.Text.JsConfig.PreferInterfaces">
            <summary>
            If set to true, Interface types will be prefered over concrete types when serializing.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.IncludeTypeInfo">
            <summary>
            Always emit type info for this type.  Takes precedence over ExcludeTypeInfo
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.ExcludeTypeInfo">
            <summary>
            Never emit type info for this type
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.EmitCamelCaseNames">
            <summary>
            <see langword="true"/> if the <see cref="T:ServiceStack.Text.Common.ITypeSerializer"/> is configured
            to take advantage of <see cref="T:System.CLSCompliantAttribute"/> specification,
            to support user-friendly serialized formats, ie emitting camelCasing for JSON
            and parsing member names and enum values in a case-insensitive manner.
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.serializeFn">
            <summary>
            Define custom serialization fn for BCL Structs
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.rawSerializeFn">
            <summary>
            Define custom raw serialization fn
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.onSerializingFn">
            <summary>
            Define custom serialization hook
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.DeSerializeFn">
            <summary>
            Define custom deserialization fn for BCL Structs
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.RawDeserializeFn">
            <summary>
            Define custom raw deserialization fn for objects
            </summary>
        </member>
        <member name="F:ServiceStack.Text.JsConfig`1.ExcludePropertyNames">
            <summary>
            Exclude specific properties of this type from being serialized
            </summary>
        </member>
        <member name="P:ServiceStack.Text.JsConfig`1.TreatValueAsRefType">
            <summary>
            Opt-in flag to set some Value Types to be treated as a Ref Type
            </summary>
        </member>
        <member name="P:ServiceStack.Text.JsConfig`1.HasSerializeFn">
            <summary>
            Whether there is a fn (raw or otherwise)
            </summary>
        </member>
        <member name="F:ServiceStack.Text.PropertyConvention.Strict">
            <summary>
            The property names on target types must match property names in the JSON source
            </summary>
        </member>
        <member name="F:ServiceStack.Text.PropertyConvention.Lenient">
            <summary>
            The property names on target types may not match the property names in the JSON source
            </summary>
        </member>
        <member name="F:ServiceStack.Text.TimeSpanHandler.DurationFormat">
            <summary>
            Uses the xsd format like PT15H10M20S
            </summary>
        </member>
        <member name="F:ServiceStack.Text.TimeSpanHandler.StandardFormat">
            <summary>
            Uses the standard .net ToString method of the TimeSpan class
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsonExtensions.Get``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get JSON string value converted to T
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsonExtensions.Get(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get JSON string value
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsonObject.GetUnescaped(System.String)">
            <summary>
            Get unescaped string value
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsonObject.Child(System.String)">
            <summary>
            Get unescaped string value
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsonObject.WriteValue(System.IO.TextWriter,System.Object)">
            <summary>
            Write JSON Array, Object, bool or number values as raw string
            </summary>
        </member>
        <member name="P:ServiceStack.Text.JsonObject.Item(System.String)">
            <summary>
            Get JSON string value
            </summary>
        </member>
        <member name="T:ServiceStack.Text.JsonSerializer">
            <summary>
            Creates an instance of a Type from a string value
            </summary>
        </member>
        <member name="M:ServiceStack.Text.JsonSerializer`1.DeserializeFromString(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Licensing">
            <summary>
            Public Code API to register commercial license for ServiceStack.
            </summary>
        </member>
        <member name="T:ServiceStack.LicenseUtils">
            <summary>
            Internal Utilities to verify licensing
            </summary>
        </member>
        <member name="M:ServiceStack.PathUtils.MapProjectPath(System.String)">
            <summary>
            Maps the path of a file in the context of a VS project
            </summary>
            <param name="relativePath">the relative path</param>
            <returns>the absolute path</returns>
            <remarks>Assumes static content is two directories above the /bin/ directory,
            eg. in a unit test scenario  the assembly would be in /bin/Debug/.</remarks>
        </member>
        <member name="M:ServiceStack.PathUtils.MapAbsolutePath(System.String)">
            <summary>
            Maps the path of a file in a self-hosted scenario
            </summary>
            <param name="relativePath">the relative path</param>
            <returns>the absolute path</returns>
            <remarks>Assumes static content is copied to /bin/ folder with the assemblies</remarks>
        </member>
        <member name="M:ServiceStack.PathUtils.MapHostAbsolutePath(System.String)">
            <summary>
            Maps the path of a file in an Asp.Net hosted scenario
            </summary>
            <param name="relativePath">the relative path</param>
            <returns>the absolute path</returns>
            <remarks>Assumes static content is in the parent folder of the /bin/ directory</remarks>
        </member>
        <member name="T:ServiceStack.QueryStringWriter`1">
            <summary>
            Implement the serializer using a more static approach
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.ReflectionExtensions.New``1(System.Type)">
            <summary>
            Creates a new instance of type. 
            First looks at JsConfig.ModelFactory before falling back to CreateInstance
            </summary>
        </member>
        <member name="M:ServiceStack.ReflectionExtensions.New(System.Type)">
            <summary>
            Creates a new instance of type. 
            First looks at JsConfig.ModelFactory before falling back to CreateInstance
            </summary>
        </member>
        <member name="M:ServiceStack.ReflectionExtensions.CreateInstance(System.Type)">
            <summary>
            Creates a new instance from the default constructor of type
            </summary>
        </member>
        <member name="M:ServiceStack.PlatformExtensions.AddAttributes(System.Reflection.PropertyInfo,System.Attribute[])">
            <summary>
            Add a Property attribute at runtime. 
            <para>Not threadsafe, should only add attributes on Startup.</para>
            </summary>
        </member>
        <member name="M:ServiceStack.PlatformExtensions.ReplaceAttribute(System.Reflection.PropertyInfo,System.Attribute)">
            <summary>
            Add a Property attribute at runtime. 
            <para>Not threadsafe, should only add attributes on Startup.</para>
            </summary>
        </member>
        <member name="F:ServiceStack.StreamExtensions.DefaultBufferSize">
            <summary>
            @jonskeet: Collection of utility methods which operate on streams.
            r285, February 26th 2009: http://www.yoda.arachsys.com/csharp/miscutil/
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExtensions.ReadFully(System.IO.Stream)">
            <summary>
            Reads the given stream up to the end, returning the data as a byte
            array.
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExtensions.ReadFully(System.IO.Stream,System.Int32)">
            <summary>
            Reads the given stream up to the end, returning the data as a byte
            array, using the given buffer size.
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExtensions.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Reads the given stream up to the end, returning the data as a byte
            array, using the given buffer for transferring data. Note that the
            current contents of the buffer is ignored, so the buffer needn't
            be cleared beforehand.
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies all the data from one stream into another.
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies all the data from one stream into another, using a buffer
            of the given size.
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copies all the data from one stream into another, using the given 
            buffer for transferring data. Note that the current contents of 
            the buffer is ignored, so the buffer needn't be cleared beforehand.
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExtensions.ReadExactly(System.IO.Stream,System.Int32)">
            <summary>
            Reads exactly the given number of bytes from the specified stream.
            If the end of the stream is reached before the specified amount
            of data is read, an exception is thrown.
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExtensions.ReadExactly(System.IO.Stream,System.Byte[])">
            <summary>
            Reads into a buffer, filling it completely.
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExtensions.ReadExactly(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Reads exactly the given number of bytes from the specified stream,
            into the given buffer, starting at position 0 of the array.
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExtensions.ReadExactly(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads exactly the given number of bytes from the specified stream,
            into the given buffer, starting at position 0 of the array.
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExtensions.ReadExactlyFast(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Same as ReadExactly, but without the argument checks.
            </summary>
        </member>
        <member name="M:ServiceStack.StringExtensions.BaseConvert(System.String,System.Int32,System.Int32)">
            <summary>
            Converts from base: 0 - 62
            </summary>
            <param name="source">The source.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.StringExtensions.FastToUtf8Bytes(System.String)">
            <summary>
            Skip the encoding process for 'safe strings' 
            </summary>
            <param name="strVal"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Text.TypeSerializer">
            <summary>
            Creates an instance of a Type from a string value
            </summary>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.CanCreateFromString(System.Type)">
            <summary>
            Determines whether the specified type is convertible from string.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified type is convertible from string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.DeserializeFromString``1(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.DeserializeFromString(System.String,System.Type)">
            <summary>
            Parses the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.ToStringDictionary``1(``0)">
            <summary>
            Useful extension method to get the Dictionary[string,string] representation of any POCO type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.Dump``1(``0)">
            <summary>
            Recursively prints the contents of any POCO object in a human-friendly, readable format
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.PrintDump``1(``0)">
            <summary>
            Print Dump to Console.WriteLine
            </summary>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer.Print(System.String,System.Object[])">
            <summary>
            Print string.Format to Console.WriteLine
            </summary>
        </member>
        <member name="M:ServiceStack.Text.TypeSerializer`1.DeserializeFromString(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.Prepare(System.DateTime,System.Boolean)">
            <summary>
            If AlwaysUseUtc is set to true then convert all DateTime to UTC.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.RepairXsdTimeSeparator(System.String)">
            <summary>
            Repairs an out-of-spec XML date/time string which incorrectly uses a space instead of a 'T' to separate the date from the time.
            These string are occasionally generated by SQLite and can cause errors in OrmLite when reading these columns from the DB.
            </summary>
            <param name="dateTimeStr">The XML date/time string to repair</param>
            <returns>The repaired string. If no repairs were made, the original string is returned.</returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseWcfJsonDateOffset(System.String)">
            <summary>
            WCF Json format: /Date(unixts+0000)/
            </summary>
            <param name="wcfJsonDate"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DateTimeSerializer.ParseWcfJsonDate(System.String)">
            <summary>
            WCF Json format: /Date(unixts+0000)/
            </summary>
            <param name="wcfJsonDate"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.Common.DeserializeTypeUtils.GetTypeStringConstructor(System.Type)">
            <summary>
            Get the type(string) constructor if exists
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.Common.JsWriter.HasAnyEscapeChars(System.String)">
            <summary>
            micro optimizations: using flags instead of value.IndexOfAny(EscapeChars)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Text.Controller.PathInfo">
            <summary>
            Class to hold  
            </summary>
        </member>
        <!-- 对于成员“M:ServiceStack.Text.Controller.PathInfo.Parse(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:ServiceStack.Text.Json.JsonTypeSerializer.WriteRawString(System.IO.TextWriter,System.String)">
            <summary>
            Shortcut escape when we're sure value doesn't contain any escaped chars
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonTypeSerializer.ConvertFromUtf32(System.Int32)">
            <summary>
            Given a character as utf32, returns the equivalent string provided that the character
            is legal json.
            </summary>
            <param name="utf32"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Text.Json.JsonUtils.HasAnyEscapeChars(System.String)">
            <summary>
            micro optimizations: using flags instead of value.IndexOfAny(EscapeChars)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Text.Json.JsonWriter`1">
            <summary>
            Implement the serializer using a more static approach
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Text.Jsv.JsvWriter`1">
            <summary>
            Implement the serializer using a more static approach
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Text.Marc.Link`2">
            <summary>
            Pretty Thread-Safe cache class from:
            http://code.google.com/p/dapper-dot-net/source/browse/Dapper/SqlMapper.cs
            
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="T:ServiceStack.Text.FastMember.ObjectAccessor">
            <summary>
            Represents an individual object, allowing access to members by-name
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.ObjectAccessor.Equals(System.Object)">
            <summary>
            Use the target types definition of equality
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.ObjectAccessor.GetHashCode">
            <summary>
            Obtain the hash of the target object
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.ObjectAccessor.ToString">
            <summary>
            Use the target's definition of a string representation
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.ObjectAccessor.Create(System.Object)">
            <summary>
            Wraps an individual object, allowing by-name access to that instance
            </summary>
        </member>
        <member name="P:ServiceStack.Text.FastMember.ObjectAccessor.Item(System.String)">
            <summary>
            Get or Set the value of a named member for the underlying object
            </summary>
        </member>
        <member name="P:ServiceStack.Text.FastMember.ObjectAccessor.Target">
            <summary>
            The object represented by this instance
            </summary>
        </member>
        <member name="T:ServiceStack.Text.FastMember.TypeAccessor">
            <summary>
            Provides by-name member-access to objects of a given type
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.TypeAccessor.CreateNew">
            <summary>
            Create a new instance of this type
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.TypeAccessor.Create(System.Type)">
            <summary>
            Provides a type-specific accessor, allowing by-name access for all objects of that type
            </summary>
            <remarks>The accessor is cached internally; a pre-existing accessor may be returned</remarks>
        </member>
        <member name="P:ServiceStack.Text.FastMember.TypeAccessor.CreateNewSupported">
            <summary>
            Does this type support new instances via a parameterless constructor?
            </summary>
        </member>
        <member name="P:ServiceStack.Text.FastMember.TypeAccessor.Item(System.Object,System.String)">
            <summary>
            Get or set the value of a named member on the target instance
            </summary>
        </member>
        <member name="T:ServiceStack.Text.Support.DoubleConverter">
            <summary>
            A class to allow the conversion of doubles to string representations of
            their exact decimal values. The implementation aims for readability over
            efficiency.
            
            Courtesy of @JonSkeet
            http://www.yoda.arachsys.com/csharp/DoubleConverter.cs
            </summary>
        </member>
        <!-- 对于成员“M:ServiceStack.Text.Support.DoubleConverter.ToExactString(System.Double)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“T:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.digits”忽略有格式错误的 XML 注释 -->
        <member name="F:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.decimalPoint">
            <summary> 
            How many digits are *after* the decimal point
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:ServiceStack.Text.Support.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
    </members>
</doc>
